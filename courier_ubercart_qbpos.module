<?php

function courier_ubercart_qbpos_menu()
{
  $items = array();

//  $items['courier/update'] = array(    
//    'page callback' => 'courier_update', 
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/update.inc',
//  );
//  
//   $items['courier/update.php'] = array(    
//    'page callback' => 'courier_update', 
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/update.inc',
//  );
//  
//  
//  $items['courier/generate_request'] = array(    
//    'page callback' => 'generate_request', 
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/request_handler.inc',
//  );   
//  
//  $items['admin/config/courier'] = array(    
//    'title' => 'Courier Settings',
//    'page callback' => 'drupal_get_form', 
//    'page arguments' => array('courier_ubercart_qbpos_admin'),
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/admin.inc',
//  );
//  
//  $items['admin/config/courier/mapping/product'] = array( 
//    'title' => 'Courier Product Mapping',
//    'page callback' => 'courier_ubercart_qbpos_admin_mapping_product', 
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/admin_mapping.inc',
//  );
//  
//  $items['admin/config/courier/mapping/customer'] = array(    
//    'title' => 'Courier User Mapping',
//    'page callback' => 'courier_ubercart_qbpos_admin_mapping_user', 
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/admin_mapping.inc',
//  );
//  
//  $items['admin/config/courier/request'] = array(    
//    'title' => 'Courier Requests',
//    'page callback' => 'drupal_get_form', 
//    'page arguments' => array('courier_ubercart_qbpos_admin_requests'),
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/admin_requests.inc',
//  );
//  
//   $items['courier'] = array(    
//    'title' => '',
//    'page callback' => 'courier_ubercart_qbpos_courier_ws',     
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//    'file' => 'includes/webservice/courier_ws.php',
//  );
  $items['admin/store/integration'] = array(
    'title' => 'QuickBooks POS Integration',
    'description' => 'Administer your QuickBooks POS Integration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  
  $items['admin/store/integration/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure settings for your QuickBooks POS Integration.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('access administration pages'),
    'page arguments' => array('courier_ubercart_qbpos_config_form'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file' => 'includes/courier_ubercart_qbpos_admin_config.inc',
  );
  
  $items['admin/store/integration/log'] = array(
    'title' => 'Logs',
    'description' => 'Communication logs.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('access administration pages'),
    'page arguments' => array('courier_ubercart_qbpos_logs_form'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,    
    'file' => 'includes/courier_ubercart_qbpos_admin_log.inc',
  );
  
//  $items['admin/store/integration/mapping'] = array(
//    'title' => 'Field Mappings for the integration.',
//    'description' => 'Integration Mappings.',
//    'page callback' => 'drupal_get_form',
//    'access arguments' => array('access administration pages'),
//    'page arguments' => array('courier_ubercart_qbpos_mapping_form'),
//    'type' => MENU_NORMAL_ITEM,
//    'weight' => 50,
//    'file' => 'includes/courier_ubercart_qbpos_admin_mapping.inc',
//  );
  
  $items['admin/store/integration/command_queue'] = array(
    'title' => 'Queue Command',
    'description' => 'Queue commands to be processed by the integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('courier_ubercart_qbpos_queue_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file' => 'includes/courier_ubercart_qbpos_admin_queue.inc',
  );
  
  $items['courier_ubercart_qbpos/update'] = array(    
    'page callback' => 'courier_ubercart_qbpos_courier_update', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/courier_ubercart_qbpos_update.inc',
  );
  
  $items['courier_ubercart_qbpos/generate_request'] = array(    
    'page callback' => 'courier_ubercart_qbpos_generate_request', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/courier_ubercart_qbpos_request_handler.inc',
  );   
  return $items;
}

//function courier_ubercart_qbpos_theme($existing, $type, $theme, $path) {
//    $theme_hooks = array(
//       'courier_ubercart_qbpos_product_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        ), 
//        'courier_ubercart_qbpos_order_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_product_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_customer_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//         'courier_ubercart_qbpos_order_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        ),
//        'courier_ubercart_qbpos_request_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin_requests.inc',
//        ),
//       'courier_ubercart_qbpos_request_log_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_customer_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        )
//    );
//            
//    return $theme_hooks;
//}

/**
* Implementation of hook_ca_action().
*/
function courier_ubercart_qbpos_ca_action() {
  
  //Download order action
  $order_arg = array(
    '#entity' => 'uc_order',
    '#title' => t('Order'),
  );
 
  $actions['download_order_qbpos'] = array(
    '#title' => t('Download order to Quickbooks POS'),
    '#category' => t('Order'),
    '#callback' => 'courier_ubercart_qbpos_download_order_qbpos',
    '#arguments' => array(
      'order' => $order_arg,        
    ),
  );
  //////
    
//  //Download Item Action
//  $product_arg = array(
//    '#entity' => 'node',
//    '#title' => t('Product'),
//  );
//  
//  $actions['download_product_qbpos'] = array(
//    '#title' => t('Download product to Quickbooks POS'),
//    '#category' => t('Product'),
//    '#callback' => 'courier_ubercart_qbpos_download_product_qbpos',
//    '#arguments' => array(
//      'product' => $product_arg,  
//    ),
//  );
//  //////
    
  //Download Customer Action  
  $customer_arg = array(
    '#entity' => 'user',
    '#title' => t('Customer'),
  );  
 
  $actions['download_customer_qbpos'] = array(
    '#title' => t('Download customer to Quickbooks POS'),
    '#category' => t('User'),
    '#callback' => 'courier_ubercart_qbpos_download_customer_qbpos',
    '#arguments' => array(
      'customer' => $customer_arg,      
    ),
  );  
  ///////  
  
  //Request Item Action
//  $item_number_arg = array(
//    '#entity' => 'text',
//    '#title' => t('Item Number'),
//  );
//  
//  $date_modified = array(    
//    '#entity' => 'text',
//    '#title' => t('Date Modified'),
//  );
// 
//  $actions['download_product_qbpos'] = array(
//    '#title' => t('Request product(s) from Quickbooks POS'),
//    '#category' => t('Product'),
//    '#callback' => 'courier_ubercart_qbpos_download_product_qbpos',
//    '#arguments' => array(
//      'item_number' => $item_number_arg,  
//      'date_modified' => $date_modified
//    ),
//  );  
//  ////////
//    
//  //Request Customer Action
//    $customer_name_arg = array(
//    '#entity' => 'text',
//    '#title' => t('Customer Name'),
//  );
//  
//  $cust_date_modified = array(    
//    '#entity' => 'text',
//    '#title' => t('Date Modified'),
//  );
// 
//  $actions['download_customer_qbpos'] = array(
//    '#title' => t('Request customer(s) from Quickbooks POS'),
//    '#category' => t('Product'),
//    '#callback' => 'courier_ubercart_qbpos_download_customer_qbpos',
//    '#arguments' => array(
//      'customer_name' => $customer_name_arg,  
//      'date_modified' => $cust_date_modified
//    ),
//  );  
  ////////

  return $actions;
}

function courier_ubercart_qbpos_download_order_qbpos($order) {           
  $request_data = serialize(array("SalesOrder_ids" => array($order->order_id)));
  
  //Save the order download request  
  db_query("insert into {courier_requests} (request_type, request_method, request_data) values('add', '%s', '%s')", $order_type, $request_data);  
  db_query("insert into {courier_transaction_log} (type, message, status) values(1, 'Order Queued for download: {$order->order_id}, Order Type: {$order_type}', true)");  
}

function courier_ubercart_qbpos_download_customer_qbpos($user) {
  
}

//custom rules exposed
function courier_ubercart_qbpos_rules_action_info() {
  $actions['download_item'] = array(
    'arguments' => array(          
      'date_modified' => array(
        'type' => 'date',
        'label' => t('From Modified Date'),
        'save' => true
      ),
    ),
    'module' => t('QuickBooks POS'),
    'label' => t('Download item(s) into Quickbooks POS'),    
    'base' => 'courier_ubercart_qbpos_download_items',  
  );
  
  $actions['read_items'] = array(
    'arguments' => array(          
      'date_modified' => array(
        'type' => 'date',
        'label' => t('From Modified Date'),
        'save' => true
      ),
    ),
    'module' => t('QuickBooks POS'),
    'label' => t('Read item(s) from Quickbooks POS'),    
    'base' => 'courier_ubercart_qbpos_read_items',  
  );
  
  $actions['read_customers'] = array(
    'arguments' => array(          
      'date_modified' => array(
        'type' => 'date',
        'label' => t('From Modified Date'),
        'save' => true
      ),
    ),
    'module' => t('QuickBooks POS'),
    'label' => t('Read customers from Quickbooks POS'),    
    'base' => 'courier_ubercart_qbpos_read_customers',  
  );
    
  return $actions;
}

function courier_ubercart_qbpos_read_items($from_date) {
  
}

function courier_ubercart_qbpos_read_customers($from_date) {
  
}

function courier_ubercart_qbpos_download_items($from_date) {
  
}

/**
  * Implements hook_services_resources().
  */
function courier_ubercart_qbpos_services_resources() {
 return array(
  'QuickBooksPOS' => array(          
    'index' => array(
      'help' => 'Retrieves open requests',      
      'file' => array('type' => 'inc', 'module' => 'courier_ubercart_qbpos', 'name' => 'includes/courier_ubercart_qbpos_retrieve_requests'),      
      'callback' => 'courier_ubercart_qbpos_retrieve_requests',
      'access callback' => 'courier_ubercart_qbpos_access',
      'access arguments' => array('view'),
      'access arguments append' => TRUE,
      'args' => array(              
      ),
    ),
    'update' => array(
      'help' => 'Calls the processing of the pending data update requests',      
      'file' => array('type' => 'inc', 'module' => 'courier_ubercart_qbpos', 'name' => 'includes/courier_ubercart_qbpos_update'),      
      'callback' => 'courier_ubercart_qbpos_courier_update',
      'access callback' => 'courier_ubercart_qbpos_access',
      'access arguments' => array('view'),
      'access arguments append' => TRUE,
      'args' => array(   
          array(
               'name' => 'job_id',
               'optional' => FALSE,
               'source' => array('path' => '0'),
               'description' => '',
               'type' => 'int',
             ), 
      ),
    ),  
    'create' => array(
      'help' => 'Create a response to a request',      
      'file' => array('type' => 'inc', 'module' => 'courier_ubercart_qbpos', 'name' => 'includes/courier_ubercart_qbpos_create_responses'),      
      'callback' => 'courier_ubercart_qbpos_create_responses',
      'access callback' => 'courier_ubercart_qbpos_access',
      'access arguments' => array('create'),
      'access arguments append' => TRUE,
      'args' => array( 
        array(
               'name' => 'response_xml',
               'optional' => FALSE,
               'source' => 'data',
               'description' => '',
               'type' => 'text',
             ), 
        array(
               'name' => 'job_id',
               'optional' => FALSE,
               'source' => array('path' => '0'),
               'description' => '',
               'type' => 'int',
             ),
        array(
               'name' => 'job_date',
               'optional' => FALSE,
               'source' => array('path' => '1'),
               'description' => '',
               'type' => 'text',
             ),          
        array(
               'name' => 'status',
               'optional' => FALSE,
               'source' => array('path' => '2'),
               'description' => '',
               'type' => 'text',
             ),
        array(
               'name' => 'record_count',
               'optional' => FALSE,
               'source' => array('path' => '3'),
               'description' => '',
               'type' => 'text',
             ),
        array(
               'name' => 'number_of_chunks',
               'optional' => FALSE,
               'source' => array('path' => '4'),
               'description' => '',
               'type' => 'int',
             ),
        array(
               'name' => 'chunk_number',
               'optional' => FALSE,
               'source' => array('path' => '5'),
               'description' => '',
               'type' => 'int',
             ),
      ),
    ),            
  ),
 );
}

/**
 * implementation of hook_services_request_postprocess_alter()
 */
function courier_ubercart_qbpos_services_request_postprocess_alter(&$controller, &$args, &$result) {
//  global $services_log_globals;
// $services_log_globals['result'] = $result;
  
  //echo "here";
}

/**
 * implementation of hook_rest_server_request_parsers_alter()
 */

function courier_ubercart_qbpos_rest_server_request_parsers_alter(&$parsers) {
  $parsers['text/xml'] = "CourierXMLResponseParser::parseXML";
}
 

function courier_ubercart_qbpos_rest_server_response_formatters_alter(&$formatters) {
  $formatters['xml']['view'] = 'RESTServerViewCourier';
}

/**
  * Implements hook_permission().
  */
function courier_ubercart_qbpos_permission() {
 return array(
     'get qbpos requests' => array(
      'title' => t('Get Open QBPOS Requests'), 
      'description' => t('Get any requests that have yet to be processed by QBPOS'),
     ),
     'create qbpos responses' => array(
      'title' => t('Create the response from qbpos requests'), 
      'description' => t('Create the response record from the qbpos request')     
     ),    
 );
}

/**
* Access callback for the get requests resource.
*
* @param string $op
*  The operation that's going to be performed.
* @param array $args
*  The arguments that will be passed to the callback.
* @return bool
*  Whether access is given or not.
*/
function courier_ubercart_qbpos_access($op, $args) {
 global $user;
 $access = true;

 switch ($op) {
   case 'view':     
     $access = user_access('get qbpos requests');     
     break;
   case 'create':     
     $access = user_access('create qbpos responses');     
     break;
 }
$access = true;
 return $access;
}

function courier_ubercart_qbpos_theme($existing, $type, $theme, $path) {
    $theme_hooks = array(
       'courier_ubercart_qbpos_request_table' => array(
       'render element' => 'form',
       'file' => 'includes/courier_ubercart_qbpos_admin_queue.inc',
        ), 
//       'courier_ubercart_qbpos_product_mapping_table' => array(
//          'render element' => 'form',
//          'file' => 'includes/admin.inc',
//        ), 
//        'courier_ubercart_qbpos_order_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_product_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_customer_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//         'courier_ubercart_qbpos_order_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        ),
//        'courier_ubercart_qbpos_request_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin_requests.inc',
//        ),
       'courier_ubercart_qbpos_request_log_table' => array(
         'render element' => 'form',
         'file' => 'includes/courier_ubercart_qbpos_admin_log.inc',
        ),
//        'courier_ubercart_qbpos_customer_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        )  
        
//        'courier_ubercart_qbpos_order_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_product_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_customer_table' => array(
//           'render element' => 'form',
//           'file' => 'includes/admin_requests.inc',
//        ),
//         'courier_ubercart_qbpos_order_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        ),
//        'courier_ubercart_qbpos_request_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin_requests.inc',
//        ),
//       'courier_ubercart_qbpos_request_log_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin_requests.inc',
//        ),
//        'courier_ubercart_qbpos_customer_mapping_table' => array(
//       'render element' => 'form',
//       'file' => 'includes/admin.inc',
//        )
    );
            
    return $theme_hooks;
}

class CourierXMLResponseParser extends RESTServer {
  public static function parseXML($handle)  {
	
    //just want the straight xml from the request to be passed along
    $xml = self::contentFromStream($handle);
    
	// if $xml_data is Null then we expect errors
    if (!$xml) {
	  // build an error message string
      $message = '';
      
	  // throw an error
      services_error($message, 406);
    }
    
  	return $xml;
  }
  
}

class RESTServerViewCourier extends RESTServerView {
  public function render() {
    $doc = new DOMDocument('1.0', 'utf-8');
    $root = $doc->createElement('courier_response');
    $doc->appendChild($root);

    $this->xml_recurse($doc, $root, $this->model);
    
    return $doc->saveXML();
  }
  
   private function xml_recurse(&$doc, &$parent, $data) {
    if (is_object($data)) {
      $data = get_object_vars($data);
    }

    if (is_array($data)) {
      $assoc = FALSE || empty($data);
      $k = '';
      if(array_key_exists('key', $data)) {
        $k = $value;
        $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);
        $k = preg_replace('/^([0-9]+)/', '_$1', $k);
      }
      foreach ($data as $key => $value) {
        if ($key === "key") {          
          $k = $value;
          $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);
          $k = preg_replace('/^([0-9]+)/', '_$1', $k);
          continue;
        }      
        else if($key === "attrs") {
          foreach($value as $attr_name => $attr_value) {
            $parent->setAttribute($attr_name, $attr_value);
          }
          continue;
        }
        else if (is_numeric($key)) {
          $key = $k;
        }
        else {
          $assoc = TRUE;
          $key = preg_replace('/[^A-Za-z0-9_]/', '_', $key);
          $key = preg_replace('/^([0-9]+)/', '_$1', $key);
        }
                
        try {
          $element = $doc->createElement($key);
        }
        catch (Exception $ex) {
          echo "here";
        }
        $parent->appendChild($element);
        $this->xml_recurse($doc, $element, $value);
      }

//      if (!$assoc) {
//        $parent->setAttribute('is_array', 'true');
//      }
    }
    elseif ($data !== NULL) {
      $parent->appendChild($doc->createTextNode($data));
    }
  }
}